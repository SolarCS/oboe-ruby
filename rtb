#!/usr/bin/env ruby
$:.push File.expand_path("../lib", __FILE__)

require 'fileutils'
require 'rubygems'
require 'bundler/setup'
require 'thor'
require 'netrc'
require 'octokit.rb'

require 'oboe/version'


class RTBClient < Thor
  class_option :verbose, :type => :boolean
  class_option :debug, :type => :boolean
  class_option :'dry-run', :type => :boolean

  attr_accessor :rtb
  attr_accessor :gem_filename
  attr_accessor :repository
  attr_accessor :gem_type
  attr_accessor :tag_name

  def initialize(*args)
    @repository = "pglombardo/oboe-ruby"
    
    super(*args)
  end

  desc "checkup", "Validates that all requirements are met and everything is setup for releases to be created."
  def checkup
    # check Ruby version
    # check that git is installed
    # check gemfury installed and configured
    # check .netrc for credentials
    # test a github login attempt with octokit.rb
  end

  desc "beta", "Releases a new beta gem to the private GemFury gem server.  See 'rtb help beta' for details."
  def beta
    @gem_type = "beta"

    begin
      say "This will build and release a new #{shell.set_color "beta", :magenta} gem to the private GemFury gem server."
      say ""
      say "Release process summary:"
      say ""
      say "update CHANGELOG:         no"
      say "gem build:                yes"
      say "git tag:                  no"
      say "gem server:               GemFury"
      say "Create Github Release?:   no"
      say ""
      verify_version
      build_gem
      fury_push
    rescue StandardError => e
      puts e.inspect
      puts e.backtrace.join("\n")
    end
  end
  
  desc "rc", "Releases a new prerelease RC gem to Rubygems.  See 'rtb help rc' for details'"
  def rc
    @gem_type = "rc"

    begin
      say "This will build and release a new #{shell.set_color "rc", :magenta} gem to the private GemFury gem server."
      say ""
      say "Release process summary:"
      say ""
      say "update CHANGELOG:         no"
      say "gem build:                yes"
      say "git tag:                  yes"
      say "gem server:               GemFury"
      say "Create Github Release?:   yes/marked 'prerelease'"
      say ""
  
      verify_version
      get_changelog
      commit_changes
      create_git_tag
      build_gem
      fury_push

      @tag_name = "#{@gem_type}-#{Oboe::Version::STRING}"
      options = {}
      options[:name] = "RC #{Oboe::Version::STRING}"
      options[:body] = "Release notes"
      options[:draft] = true
      options[:prerelease] = true
      
      create_github_release(options)
    rescue StandardError => e
      puts e.inspect
      puts e.backtrace.join("\n")
    end
  end
  
  private
    def verify_version
      while true
        say ""
        say "The gem will be #{shell.set_color @gem_type, :magenta} gem: #{shell.set_color Oboe::Version::STRING, :red}."
        say ""
        if options[:'dry-run']
          confirm = ask "Is this correct? #{shell.set_color "(this is a dry-run)", :yellow } [yNeq?]"
        else
          confirm = ask "Is this correct? [yNeq?]"
        end

        case confirm.downcase
        when '?'
          say ""
          say "y == Yes"
          say "n == No"
          say "e == Edit lib/oboe/version.rb in an editor."
          say "     Chosen by shell environment var: $EDITOR."
          say "     Current value: #{ENV['EDITOR']}"
          say "q == Quit"
          say "? == Show this screen"
          say ""
        when 'y'
          break
        when 'n', 'q'
          say 'Release cancelled.  Nothing done.'
          exit 0
        when 'e'
          system(ENV['EDITOR'], "#{File.expand_path("..", __FILE__)}/lib/oboe/version.rb")
          say ""
          say "Reloading version..."
          $LOADED_FEATURES.delete("#{File.expand_path("..", __FILE__)}/lib/oboe/version.rb")
          require 'oboe/version'
          say ""
          say "Version updated..."
        else
          say "Unrecognized response."
        end
      end

      say "Executing a dry-run release (nothing will really be done)" if options['dry-run']
    end

    def get_changelog

    end

    def commit_changes
      say shell.set_color "Commiting local changes...", :red

      %x(git reset)
      %x(git add lib/oboe/version.rb)
      %x(git add CHANGELOG)
      %x(git commit -am "Release (rtb) #{@tag_name})
      
    end

    def create_git_tag
      say shell.set_color "Creating git tag...", :red
      
      
    end

    def build_gem
      say shell.set_color "Building the gem...", :red

      if options['dry-run']
        say shell.set_color "I would normally run a gem build now: gem build oboe.gemspec", :green
      else
        say %x(gem build oboe.gemspec)
        
        @gem_filename = File.expand_path("..", __FILE__) + "/oboe-#{Oboe::Version::STRING}.gem"
        
        if File.exists?(@gem_filename)
          FileUtils.move(@gem_filename, File.expand_path("..", __FILE__) + "/pkg/")
          @gem_filename = File.expand_path("..", __FILE__) + "/pkg/oboe-#{Oboe::Version::STRING}.gem"
        else
          raise StandardError.new("gem build failed :(")
        end
      end
    end

    ##
    # Push a gem to the GemFury gem server
    def fury_push
      say shell.set_color "Pushing the gem to GemFury...", :red
      say %x(fury push #{@gem_filename})
    end

    ##
    # Check whether a version of the gem has already been uploaded
    # to GemFury
    #
    def fury_gem_exists?(version)
      x = `fury versions oboe | grep #{version}`
      x.length
    end

    ##
    # Create a Github Release
    #
    #
    def create_github_release(options)
      begin
        say sell.set_color "Creating a GitHub release...", :red

        client = Octokit::Client.new :netrc => true
        user = client.user
        user.login
        
        release = client.create_release @repository, @tag_name, options

        release_url = "https://github.com/#{@repository}/releases/#{release.id}"
        release.upload_asset release_url, @gem_filename

        release_url
      rescue StandardError => e
        puts e.inspect
        puts e.backtrace.join("\n")
      end
    end
end

RTBClient.start(ARGV)

